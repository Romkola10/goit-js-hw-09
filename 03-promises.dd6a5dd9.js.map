{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,gBACpCE,EAAYH,SAASC,cAAc,eACnCG,EAAcJ,SAASC,cAAc,iBAyB3C,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEG,SAAAT,EAAUC,UAEpBM,EAAO,CAAEE,SAAAT,EAAUC,YAEpBA,MA/BPR,EAAKiB,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBAENJ,YAAW,WACT,IAAK,IAAIK,EAAI,EAAGA,EAAIf,EAAYgB,MAAOD,GAAK,EAAG,CAC7C,IAAME,GAAQnB,EAAWkB,QAASjB,EAAUiB,MAAQD,EAEpDd,EADWc,EAAI,EACSE,GACrBC,MAAK,SAAAC,G,IAAGC,EAAQD,EAARR,SAAUR,EAAKgB,EAALhB,MACjBkB,QAAQC,IAAI,uBAAwCC,OAAfH,EAAS,QAAYG,OAANpB,EAAM,QAC1DV,EAAA+B,OAAOC,QAAQ,uBAAwCF,OAAfH,EAAS,QAAYG,OAANpB,EAAM,WAE9DuB,OAAM,SAAAP,G,IAAGQ,EAAQR,EAARR,SAAUR,EAAKgB,EAALhB,MAClBkB,QAAQC,IAAI,sBAAuCC,OAAfI,EAAS,QAAYJ,OAANpB,EAAM,QACzDV,EAAA+B,OAAOI,QAAQ,sBAAqCL,OAAfI,EAAS,QAAYJ,OAANpB,EAAM,cAG/DL,EAAWkB,U","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\nconst delayInput = document.querySelector('[name=delay]');\nconst stepInput = document.querySelector('[name=step]');\nconst amountInput = document.querySelector('[name=amount]');\nlet position = 0;\n\nform.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n\n  setTimeout(() => {\n    for (let i = 0; i < amountInput.value; i += 1) {\n      const step = +delayInput.value + +stepInput.value * i;\n      position = i + 1;\n      createPromise(position, step)\n        .then(({ position, delay }) => {\n          console.log(`✅ Fulfilled promise ${position} in ${delay} ms`);\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay} ms`);\n        })\n        .catch(({ position, delay }) => {\n          console.log(`❌ Rejected promise ${position} in ${delay} ms`);\n          Notify.failure(`❌ Rejected promise ${position} in ${delay} ms`);\n        });\n    }\n  }, delayInput.value);\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$createPromise","position3","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","position","addEventListener","event","preventDefault","i","value","step","then","param","position1","console","log","concat","Notify","success","catch","position2","failure"],"version":3,"file":"03-promises.dd6a5dd9.js.map"}